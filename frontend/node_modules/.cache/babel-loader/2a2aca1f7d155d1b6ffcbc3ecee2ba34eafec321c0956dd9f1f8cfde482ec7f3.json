{"ast":null,"code":"var _jsxFileName = \"/Users/finn/Documents/GitHub/SudokuSolver/frontend/src/components/SudokuBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './SudokuBoard.css';\nimport SudokuCell from './SudokuCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuBoard = () => {\n  _s();\n  // Initialize empty 9x9 board with zeros\n  const emptyBoard = Array(9).fill().map(() => Array(9).fill(0));\n\n  // State variables\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(emptyBoard);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [validationError, setValidationError] = useState(null);\n  const [isSolved, setIsSolved] = useState(false);\n\n  // Example Sudoku puzzle\n  const examplePuzzle = [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]];\n\n  // State to track invalid cells\n  const [invalidCells, setInvalidCells] = useState([]);\n\n  // Validate the board for duplicate numbers in rows, columns, and boxes\n  const validateBoard = board => {\n    const newInvalidCells = [];\n    let errorMessage = null;\n\n    // Check rows\n    for (let row = 0; row < 9; row++) {\n      const rowNumbers = new Map();\n      for (let col = 0; col < 9; col++) {\n        const num = board[row][col];\n        if (num !== 0) {\n          if (rowNumbers.has(num)) {\n            // Mark both cells as invalid\n            const prevCol = rowNumbers.get(num);\n            newInvalidCells.push([row, prevCol]);\n            newInvalidCells.push([row, col]);\n            errorMessage = `Duplicate number ${num} in row ${row + 1}`;\n          } else {\n            rowNumbers.set(num, col);\n          }\n        }\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < 9; col++) {\n      const colNumbers = new Map();\n      for (let row = 0; row < 9; row++) {\n        const num = board[row][col];\n        if (num !== 0) {\n          if (colNumbers.has(num)) {\n            // Mark both cells as invalid\n            const prevRow = colNumbers.get(num);\n            newInvalidCells.push([prevRow, col]);\n            newInvalidCells.push([row, col]);\n            if (!errorMessage) {\n              errorMessage = `Duplicate number ${num} in column ${col + 1}`;\n            }\n          } else {\n            colNumbers.set(num, row);\n          }\n        }\n      }\n    }\n\n    // Check 3x3 boxes\n    for (let boxRow = 0; boxRow < 3; boxRow++) {\n      for (let boxCol = 0; boxCol < 3; boxCol++) {\n        const boxNumbers = new Map();\n        for (let i = 0; i < 3; i++) {\n          for (let j = 0; j < 3; j++) {\n            const row = boxRow * 3 + i;\n            const col = boxCol * 3 + j;\n            const num = board[row][col];\n            if (num !== 0) {\n              if (boxNumbers.has(num)) {\n                // Mark both cells as invalid\n                const [prevI, prevJ] = boxNumbers.get(num);\n                const prevRow = boxRow * 3 + prevI;\n                const prevCol = boxCol * 3 + prevJ;\n                newInvalidCells.push([prevRow, prevCol]);\n                newInvalidCells.push([row, col]);\n                if (!errorMessage) {\n                  errorMessage = `Duplicate number ${num} in box at position (${boxRow + 1},${boxCol + 1})`;\n                }\n              } else {\n                boxNumbers.set(num, [i, j]);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Update invalid cells state\n    setInvalidCells(newInvalidCells);\n\n    // Return error message if any\n    return errorMessage;\n  };\n\n  // Handle cell value change\n  const handleCellChange = (row, col, value) => {\n    // Create a deep copy of the board\n    const newBoard = board.map(row => [...row]);\n\n    // Update the cell value (convert to number or 0 if empty)\n    newBoard[row][col] = value === '' ? 0 : parseInt(value, 10);\n\n    // Validate the board\n    const validationResult = validateBoard(newBoard);\n    setValidationError(validationResult);\n\n    // Clear error message if validation errors are fixed\n    if (!validationResult && error === 'Please fix the validation errors before solving.') {\n      setError(null);\n    }\n\n    // Update the board state\n    setBoard(newBoard);\n  };\n\n  // Toggle between solve and unsolve\n  const toggleSolve = async () => {\n    // If already solved, revert to original board\n    if (isSolved) {\n      setBoard(originalBoard.map(row => [...row]));\n      setError(null);\n      setValidationError(null);\n      setInvalidCells([]);\n      setIsSolved(false);\n      return;\n    }\n\n    // Check for validation errors before solving\n    if (validationError) {\n      setError('Please fix the validation errors before solving.');\n      return;\n    }\n\n    // Otherwise, solve the puzzle\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Save the original board state before solving\n      setOriginalBoard(board.map(row => [...row]));\n\n      // Send the board to the backend for solving\n      const response = await axios.post('/api/sudoku/solve', {\n        board\n      });\n\n      // Update the board with the solution\n      if (response.data.solved) {\n        setBoard(response.data.board);\n        setIsSolved(true);\n      } else {\n        setError(response.data.message || 'Failed to solve the puzzle.');\n      }\n    } catch (err) {\n      setError('Error connecting to the server. Please try again.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load the example puzzle\n  const loadExample = () => {\n    setBoard(examplePuzzle.map(row => [...row]));\n    setOriginalBoard(examplePuzzle.map(row => [...row]));\n    setError(null);\n    setValidationError(null);\n    setInvalidCells([]);\n    setIsSolved(false);\n  };\n\n  // Clear the board\n  const clearBoard = () => {\n    setBoard(emptyBoard.map(row => [...row]));\n    setOriginalBoard(emptyBoard.map(row => [...row]));\n    setError(null);\n    setValidationError(null);\n    setInvalidCells([]);\n    setIsSolved(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sudoku-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(SudokuCell, {\n          value: cell,\n          onChange: value => handleCellChange(rowIndex, colIndex, value),\n          row: rowIndex,\n          col: colIndex,\n          isOriginal: !isSolved || originalBoard[rowIndex][colIndex] === cell,\n          isInvalid: invalidCells.some(([r, c]) => r === rowIndex && c === colIndex)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleSolve,\n        disabled: loading,\n        children: loading ? 'Solving...' : isSolved ? 'Unsolve' : 'Solve'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadExample,\n        children: \"Load Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearBoard,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }, this), validationError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"validation-error-message\",\n      children: [\"Invalid input: \", validationError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuBoard, \"FevxDZsYLyYwilic8V/C7quj71w=\");\n_c = SudokuBoard;\nexport default SudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","axios","SudokuCell","jsxDEV","_jsxDEV","SudokuBoard","_s","emptyBoard","Array","fill","map","board","setBoard","originalBoard","setOriginalBoard","loading","setLoading","error","setError","validationError","setValidationError","isSolved","setIsSolved","examplePuzzle","invalidCells","setInvalidCells","validateBoard","newInvalidCells","errorMessage","row","rowNumbers","Map","col","num","has","prevCol","get","push","set","colNumbers","prevRow","boxRow","boxCol","boxNumbers","i","j","prevI","prevJ","handleCellChange","value","newBoard","parseInt","validationResult","toggleSolve","response","post","data","solved","message","err","console","loadExample","clearBoard","className","children","rowIndex","cell","colIndex","onChange","isOriginal","isInvalid","some","r","c","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/finn/Documents/GitHub/SudokuSolver/frontend/src/components/SudokuBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './SudokuBoard.css';\nimport SudokuCell from './SudokuCell';\n\nconst SudokuBoard = () => {\n  // Initialize empty 9x9 board with zeros\n  const emptyBoard = Array(9).fill().map(() => Array(9).fill(0));\n\n  // State variables\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(emptyBoard);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [validationError, setValidationError] = useState(null);\n  const [isSolved, setIsSolved] = useState(false);\n\n  // Example Sudoku puzzle\n  const examplePuzzle = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n  ];\n\n  // State to track invalid cells\n  const [invalidCells, setInvalidCells] = useState([]);\n\n  // Validate the board for duplicate numbers in rows, columns, and boxes\n  const validateBoard = (board) => {\n    const newInvalidCells = [];\n    let errorMessage = null;\n\n    // Check rows\n    for (let row = 0; row < 9; row++) {\n      const rowNumbers = new Map();\n      for (let col = 0; col < 9; col++) {\n        const num = board[row][col];\n        if (num !== 0) {\n          if (rowNumbers.has(num)) {\n            // Mark both cells as invalid\n            const prevCol = rowNumbers.get(num);\n            newInvalidCells.push([row, prevCol]);\n            newInvalidCells.push([row, col]);\n            errorMessage = `Duplicate number ${num} in row ${row + 1}`;\n          } else {\n            rowNumbers.set(num, col);\n          }\n        }\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < 9; col++) {\n      const colNumbers = new Map();\n      for (let row = 0; row < 9; row++) {\n        const num = board[row][col];\n        if (num !== 0) {\n          if (colNumbers.has(num)) {\n            // Mark both cells as invalid\n            const prevRow = colNumbers.get(num);\n            newInvalidCells.push([prevRow, col]);\n            newInvalidCells.push([row, col]);\n            if (!errorMessage) {\n              errorMessage = `Duplicate number ${num} in column ${col + 1}`;\n            }\n          } else {\n            colNumbers.set(num, row);\n          }\n        }\n      }\n    }\n\n    // Check 3x3 boxes\n    for (let boxRow = 0; boxRow < 3; boxRow++) {\n      for (let boxCol = 0; boxCol < 3; boxCol++) {\n        const boxNumbers = new Map();\n        for (let i = 0; i < 3; i++) {\n          for (let j = 0; j < 3; j++) {\n            const row = boxRow * 3 + i;\n            const col = boxCol * 3 + j;\n            const num = board[row][col];\n            if (num !== 0) {\n              if (boxNumbers.has(num)) {\n                // Mark both cells as invalid\n                const [prevI, prevJ] = boxNumbers.get(num);\n                const prevRow = boxRow * 3 + prevI;\n                const prevCol = boxCol * 3 + prevJ;\n                newInvalidCells.push([prevRow, prevCol]);\n                newInvalidCells.push([row, col]);\n                if (!errorMessage) {\n                  errorMessage = `Duplicate number ${num} in box at position (${boxRow + 1},${boxCol + 1})`;\n                }\n              } else {\n                boxNumbers.set(num, [i, j]);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Update invalid cells state\n    setInvalidCells(newInvalidCells);\n\n    // Return error message if any\n    return errorMessage;\n  };\n\n  // Handle cell value change\n  const handleCellChange = (row, col, value) => {\n    // Create a deep copy of the board\n    const newBoard = board.map(row => [...row]);\n\n    // Update the cell value (convert to number or 0 if empty)\n    newBoard[row][col] = value === '' ? 0 : parseInt(value, 10);\n\n    // Validate the board\n    const validationResult = validateBoard(newBoard);\n    setValidationError(validationResult);\n\n    // Clear error message if validation errors are fixed\n    if (!validationResult && error === 'Please fix the validation errors before solving.') {\n      setError(null);\n    }\n\n    // Update the board state\n    setBoard(newBoard);\n  };\n\n  // Toggle between solve and unsolve\n  const toggleSolve = async () => {\n    // If already solved, revert to original board\n    if (isSolved) {\n      setBoard(originalBoard.map(row => [...row]));\n      setError(null);\n      setValidationError(null);\n      setInvalidCells([]);\n      setIsSolved(false);\n      return;\n    }\n\n    // Check for validation errors before solving\n    if (validationError) {\n      setError('Please fix the validation errors before solving.');\n      return;\n    }\n\n    // Otherwise, solve the puzzle\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Save the original board state before solving\n      setOriginalBoard(board.map(row => [...row]));\n\n      // Send the board to the backend for solving\n      const response = await axios.post('/api/sudoku/solve', { board });\n\n      // Update the board with the solution\n      if (response.data.solved) {\n        setBoard(response.data.board);\n        setIsSolved(true);\n      } else {\n        setError(response.data.message || 'Failed to solve the puzzle.');\n      }\n    } catch (err) {\n      setError('Error connecting to the server. Please try again.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load the example puzzle\n  const loadExample = () => {\n    setBoard(examplePuzzle.map(row => [...row]));\n    setOriginalBoard(examplePuzzle.map(row => [...row]));\n    setError(null);\n    setValidationError(null);\n    setInvalidCells([]);\n    setIsSolved(false);\n  };\n\n  // Clear the board\n  const clearBoard = () => {\n    setBoard(emptyBoard.map(row => [...row]));\n    setOriginalBoard(emptyBoard.map(row => [...row]));\n    setError(null);\n    setValidationError(null);\n    setInvalidCells([]);\n    setIsSolved(false);\n  };\n\n  return (\n    <div className=\"sudoku-container\">\n      <div className=\"sudoku-board\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"sudoku-row\">\n            {row.map((cell, colIndex) => (\n              <SudokuCell\n                key={`${rowIndex}-${colIndex}`}\n                value={cell}\n                onChange={(value) => handleCellChange(rowIndex, colIndex, value)}\n                row={rowIndex}\n                col={colIndex}\n                isOriginal={!isSolved || originalBoard[rowIndex][colIndex] === cell}\n                isInvalid={invalidCells.some(([r, c]) => r === rowIndex && c === colIndex)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"controls\">\n        <button onClick={toggleSolve} disabled={loading}>\n          {loading ? 'Solving...' : isSolved ? 'Unsolve' : 'Solve'}\n        </button>\n        <button onClick={loadExample}>Load Example</button>\n        <button onClick={clearBoard}>Clear</button>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n      {validationError && <div className=\"validation-error-message\">Invalid input: {validationError}</div>}\n    </div>\n  );\n};\n\nexport default SudokuBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}