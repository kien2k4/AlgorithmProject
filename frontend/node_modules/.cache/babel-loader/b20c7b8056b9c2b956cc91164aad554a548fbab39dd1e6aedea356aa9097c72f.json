{"ast":null,"code":"var _jsxFileName = \"/Users/finn/Documents/GitHub/SudokuSolver/frontend/src/components/SudokuBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './SudokuBoard.css';\nimport SudokuCell from './SudokuCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuBoard = () => {\n  _s();\n  // Initialize empty 9x9 board with zeros\n  const emptyBoard = Array(9).fill().map(() => Array(9).fill(0));\n\n  // State variables\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(emptyBoard);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isSolved, setIsSolved] = useState(false);\n\n  // Example Sudoku puzzle\n  const examplePuzzle = [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]];\n\n  // Handle cell value change\n  const handleCellChange = (row, col, value) => {\n    // Create a deep copy of the board\n    const newBoard = board.map(row => [...row]);\n\n    // Update the cell value (convert to number or 0 if empty)\n    newBoard[row][col] = value === '' ? 0 : parseInt(value, 10);\n\n    // Update the board state\n    setBoard(newBoard);\n  };\n\n  // Toggle between solve and unsolve\n  const toggleSolve = async () => {\n    // If already solved, revert to original board\n    if (isSolved) {\n      setBoard(originalBoard.map(row => [...row]));\n      setError(null);\n      setIsSolved(false);\n      return;\n    }\n\n    // Otherwise, solve the puzzle\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Save the original board state before solving\n      setOriginalBoard(board.map(row => [...row]));\n\n      // Send the board to the backend for solving\n      const response = await axios.post('/api/sudoku/solve', {\n        board\n      });\n\n      // Update the board with the solution\n      if (response.data.solved) {\n        setBoard(response.data.board);\n        setIsSolved(true);\n      } else {\n        setError(response.data.message || 'Failed to solve the puzzle.');\n      }\n    } catch (err) {\n      setError('Error connecting to the server. Please try again.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load the example puzzle\n  const loadExample = () => {\n    setBoard(examplePuzzle.map(row => [...row]));\n    setOriginalBoard(examplePuzzle.map(row => [...row]));\n    setError(null);\n    setIsSolved(false);\n  };\n\n  // Clear the board\n  const clearBoard = () => {\n    setBoard(emptyBoard.map(row => [...row]));\n    setOriginalBoard(emptyBoard.map(row => [...row]));\n    setError(null);\n    setIsSolved(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sudoku-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(SudokuCell, {\n          value: cell,\n          onChange: value => handleCellChange(rowIndex, colIndex, value),\n          row: rowIndex,\n          col: colIndex,\n          isOriginal: !isSolved || originalBoard[rowIndex][colIndex] === cell\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleSolve,\n        disabled: loading,\n        children: loading ? 'Solving...' : isSolved ? 'Unsolve' : 'Solve'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadExample,\n        children: \"Load Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearBoard,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuBoard, \"FxsA7laBfdHCRMEcmajJSuEhy2M=\");\n_c = SudokuBoard;\nexport default SudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","axios","SudokuCell","jsxDEV","_jsxDEV","SudokuBoard","_s","emptyBoard","Array","fill","map","board","setBoard","originalBoard","setOriginalBoard","loading","setLoading","error","setError","isSolved","setIsSolved","examplePuzzle","handleCellChange","row","col","value","newBoard","parseInt","toggleSolve","response","post","data","solved","message","err","console","loadExample","clearBoard","className","children","rowIndex","cell","colIndex","onChange","isOriginal","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/finn/Documents/GitHub/SudokuSolver/frontend/src/components/SudokuBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './SudokuBoard.css';\nimport SudokuCell from './SudokuCell';\n\nconst SudokuBoard = () => {\n  // Initialize empty 9x9 board with zeros\n  const emptyBoard = Array(9).fill().map(() => Array(9).fill(0));\n\n  // State variables\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(emptyBoard);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isSolved, setIsSolved] = useState(false);\n\n  // Example Sudoku puzzle\n  const examplePuzzle = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n  ];\n\n  // Handle cell value change\n  const handleCellChange = (row, col, value) => {\n    // Create a deep copy of the board\n    const newBoard = board.map(row => [...row]);\n\n    // Update the cell value (convert to number or 0 if empty)\n    newBoard[row][col] = value === '' ? 0 : parseInt(value, 10);\n\n    // Update the board state\n    setBoard(newBoard);\n  };\n\n  // Toggle between solve and unsolve\n  const toggleSolve = async () => {\n    // If already solved, revert to original board\n    if (isSolved) {\n      setBoard(originalBoard.map(row => [...row]));\n      setError(null);\n      setIsSolved(false);\n      return;\n    }\n\n    // Otherwise, solve the puzzle\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Save the original board state before solving\n      setOriginalBoard(board.map(row => [...row]));\n\n      // Send the board to the backend for solving\n      const response = await axios.post('/api/sudoku/solve', { board });\n\n      // Update the board with the solution\n      if (response.data.solved) {\n        setBoard(response.data.board);\n        setIsSolved(true);\n      } else {\n        setError(response.data.message || 'Failed to solve the puzzle.');\n      }\n    } catch (err) {\n      setError('Error connecting to the server. Please try again.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load the example puzzle\n  const loadExample = () => {\n    setBoard(examplePuzzle.map(row => [...row]));\n    setOriginalBoard(examplePuzzle.map(row => [...row]));\n    setError(null);\n    setIsSolved(false);\n  };\n\n  // Clear the board\n  const clearBoard = () => {\n    setBoard(emptyBoard.map(row => [...row]));\n    setOriginalBoard(emptyBoard.map(row => [...row]));\n    setError(null);\n    setIsSolved(false);\n  };\n\n  return (\n    <div className=\"sudoku-container\">\n      <div className=\"sudoku-board\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"sudoku-row\">\n            {row.map((cell, colIndex) => (\n              <SudokuCell\n                key={`${rowIndex}-${colIndex}`}\n                value={cell}\n                onChange={(value) => handleCellChange(rowIndex, colIndex, value)}\n                row={rowIndex}\n                col={colIndex}\n                isOriginal={!isSolved || originalBoard[rowIndex][colIndex] === cell}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"controls\">\n        <button onClick={toggleSolve} disabled={loading}>\n          {loading ? 'Solving...' : isSolved ? 'Unsolve' : 'Solve'}\n        </button>\n        <button onClick={loadExample}>Load Example</button>\n        <button onClick={clearBoard}>Clear</button>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  );\n};\n\nexport default SudokuBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}