{"ast":null,"code":"var _jsxFileName = \"/Users/finn/Documents/GitHub/SudokuSolver/frontend/src/components/SudokuBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './SudokuBoard.css';\nimport SudokuCell from './SudokuCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuBoard = () => {\n  _s();\n  // Initialize empty 9x9 board with zeros\n  const emptyBoard = Array(9).fill().map(() => Array(9).fill(0));\n\n  // State variables\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(emptyBoard);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Example Sudoku puzzle\n  const examplePuzzle = [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]];\n\n  // Handle cell value change\n  const handleCellChange = (row, col, value) => {\n    // Create a deep copy of the board\n    const newBoard = board.map(row => [...row]);\n\n    // Update the cell value (convert to number or 0 if empty)\n    newBoard[row][col] = value === '' ? 0 : parseInt(value, 10);\n\n    // Update the board state\n    setBoard(newBoard);\n  };\n\n  // Solve the Sudoku puzzle\n  const solvePuzzle = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Save the original board state before solving\n      setOriginalBoard(board.map(row => [...row]));\n\n      // Send the board to the backend for solving\n      const response = await axios.post('/api/sudoku/solve', {\n        board\n      });\n\n      // Update the board with the solution\n      if (response.data.solved) {\n        setBoard(response.data.board);\n      } else {\n        setError(response.data.message || 'Failed to solve the puzzle.');\n      }\n    } catch (err) {\n      setError('Error connecting to the server. Please try again.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Revert to the original unsolved puzzle\n  const unsolve = () => {\n    setBoard(originalBoard.map(row => [...row]));\n    setError(null);\n  };\n\n  // Load the example puzzle\n  const loadExample = () => {\n    setBoard(examplePuzzle.map(row => [...row]));\n    setOriginalBoard(examplePuzzle.map(row => [...row]));\n    setError(null);\n  };\n\n  // Clear the board\n  const clearBoard = () => {\n    setBoard(emptyBoard.map(row => [...row]));\n    setOriginalBoard(emptyBoard.map(row => [...row]));\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sudoku-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(SudokuCell, {\n          value: cell,\n          onChange: value => handleCellChange(rowIndex, colIndex, value),\n          row: rowIndex,\n          col: colIndex\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solvePuzzle,\n        disabled: loading,\n        children: loading ? 'Solving...' : 'Solve'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: unsolve,\n        children: \"Unsolve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadExample,\n        children: \"Load Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearBoard,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuBoard, \"hfvc1uUUCiRgPPJ1uIm6MBXj9xM=\");\n_c = SudokuBoard;\nexport default SudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","axios","SudokuCell","jsxDEV","_jsxDEV","SudokuBoard","_s","emptyBoard","Array","fill","map","board","setBoard","originalBoard","setOriginalBoard","loading","setLoading","error","setError","examplePuzzle","handleCellChange","row","col","value","newBoard","parseInt","solvePuzzle","response","post","data","solved","message","err","console","unsolve","loadExample","clearBoard","className","children","rowIndex","cell","colIndex","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/finn/Documents/GitHub/SudokuSolver/frontend/src/components/SudokuBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './SudokuBoard.css';\nimport SudokuCell from './SudokuCell';\n\nconst SudokuBoard = () => {\n  // Initialize empty 9x9 board with zeros\n  const emptyBoard = Array(9).fill().map(() => Array(9).fill(0));\n  \n  // State variables\n  const [board, setBoard] = useState(emptyBoard);\n  const [originalBoard, setOriginalBoard] = useState(emptyBoard);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Example Sudoku puzzle\n  const examplePuzzle = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n  ];\n  \n  // Handle cell value change\n  const handleCellChange = (row, col, value) => {\n    // Create a deep copy of the board\n    const newBoard = board.map(row => [...row]);\n    \n    // Update the cell value (convert to number or 0 if empty)\n    newBoard[row][col] = value === '' ? 0 : parseInt(value, 10);\n    \n    // Update the board state\n    setBoard(newBoard);\n  };\n  \n  // Solve the Sudoku puzzle\n  const solvePuzzle = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Save the original board state before solving\n      setOriginalBoard(board.map(row => [...row]));\n      \n      // Send the board to the backend for solving\n      const response = await axios.post('/api/sudoku/solve', { board });\n      \n      // Update the board with the solution\n      if (response.data.solved) {\n        setBoard(response.data.board);\n      } else {\n        setError(response.data.message || 'Failed to solve the puzzle.');\n      }\n    } catch (err) {\n      setError('Error connecting to the server. Please try again.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Revert to the original unsolved puzzle\n  const unsolve = () => {\n    setBoard(originalBoard.map(row => [...row]));\n    setError(null);\n  };\n  \n  // Load the example puzzle\n  const loadExample = () => {\n    setBoard(examplePuzzle.map(row => [...row]));\n    setOriginalBoard(examplePuzzle.map(row => [...row]));\n    setError(null);\n  };\n  \n  // Clear the board\n  const clearBoard = () => {\n    setBoard(emptyBoard.map(row => [...row]));\n    setOriginalBoard(emptyBoard.map(row => [...row]));\n    setError(null);\n  };\n  \n  return (\n    <div className=\"sudoku-container\">\n      <div className=\"sudoku-board\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"sudoku-row\">\n            {row.map((cell, colIndex) => (\n              <SudokuCell\n                key={`${rowIndex}-${colIndex}`}\n                value={cell}\n                onChange={(value) => handleCellChange(rowIndex, colIndex, value)}\n                row={rowIndex}\n                col={colIndex}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={solvePuzzle} disabled={loading}>\n          {loading ? 'Solving...' : 'Solve'}\n        </button>\n        <button onClick={unsolve}>Unsolve</button>\n        <button onClick={loadExample}>Load Example</button>\n        <button onClick={clearBoard}>Clear</button>\n      </div>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  );\n};\n\nexport default SudokuBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}